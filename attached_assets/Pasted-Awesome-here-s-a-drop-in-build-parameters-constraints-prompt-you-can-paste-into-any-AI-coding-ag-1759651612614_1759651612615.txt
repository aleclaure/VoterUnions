Awesome‚Äîhere‚Äôs a drop-in ‚Äúbuild parameters & constraints‚Äù prompt you can paste into any AI coding agent so the project stays 100% Expo-Go‚Äìcompatible now, and cleanly graduates to EAS iOS/Android builds later.

‚∏ª

üîß Build Parameters & Constraints (Expo + Supabase)

Follow all of the rules below while building this app. The app MUST run in Expo Go during development and build reliably with EAS Build for both iOS and Android later.

0) Project Baseline
	‚Ä¢	Use the latest stable Expo SDK (managed workflow). Do not eject unless explicitly instructed.
	‚Ä¢	Language: TypeScript (strict mode). Target ES2020+.
	‚Ä¢	State: React Query (TanStack) + lightweight local state (Zustand or Context).
	‚Ä¢	Navigation: @react-navigation/native with native stack + bottom tabs. Properly configure gesture handler & reanimated per Expo docs.
	‚Ä¢	Runtime: Hermes enabled.
	‚Ä¢	Package policy: no unmaintained libs, no custom native modules that don‚Äôt work in Expo Go. If a native dependency is required later, gate it behind expo-dev-client and feature flags.

1) Expo Go Compatibility Rules
	‚Ä¢	Only use Expo-supported packages (e.g., expo-notifications, expo-secure-store, expo-file-system, expo-sharing, expo-haptics, expo-image, expo-blur, expo-clipboard).
	‚Ä¢	Forbidden while in Expo Go: any third-party module that requires npx expo prebuild or custom native code. If absolutely needed, wrap behind a canUseNativeFeature() check and provide a pure-JS fallback.
	‚Ä¢	Media, camera, and file features must use Expo equivalents (expo-camera, expo-image-picker, expo-file-system).
	‚Ä¢	Do not modify android/ or ios/ folders unless we intentionally prebuild (later milestone).

2) App Config & Environments
	‚Ä¢	Use app.json/app.config.ts with typed config and per-env overrides.
	‚Ä¢	Secrets: never hardcode. Load from EAS Secrets + .env* via expo-env or react-native-dotenv (JS-only use). Access at runtime via expo-constants.
	‚Ä¢	Define scheme, deepLinks, and universal links/app links upfront (needed for OAuth and passwordless).
	‚Ä¢	Set icons/splash/screens in config; provide iOS 1024√ó1024 icon and adaptive Android icon.

3) Supabase (Auth, DB, Realtime, Storage)
	‚Ä¢	Official client: @supabase/supabase-js v^latest compatible with RN.
	‚Ä¢	Auth:
	‚Ä¢	Support email OTP + OAuth providers that work with RN deep linking.
	‚Ä¢	Use SecureStore for refresh/access tokens; never AsyncStorage for secrets.
	‚Ä¢	Handle token rotation; attach interceptors to inject latest access token.
	‚Ä¢	Realtime:
	‚Ä¢	Use realtime channels for debates, posts, and presence. Auto-reconnect, exponential backoff, and network awareness (via expo-network).
	‚Ä¢	Storage:
	‚Ä¢	Use signed URLs with short TTL; cache media via expo-file-system + ETag.
	‚Ä¢	RLS:
	‚Ä¢	Design tables with Row-Level Security; all app reads/writes go through policies. No public anon writes.

4) Core Domains (Feature Contracts)
	‚Ä¢	Union Pages
	‚Ä¢	Public feed (read-only for non-members), private channels for members.
	‚Ä¢	Roles: owner, admin, moderator, member, guest.
	‚Ä¢	Content model: unions, channels, posts, comments, reactions, attachments.
	‚Ä¢	Debate
	‚Ä¢	Threaded arguments with stance metadata (pro/con/neutral).
	‚Ä¢	Rate limiting + cooldown to avoid spam; per-user per-channel write limits.
	‚Ä¢	Voting & Pledges
	‚Ä¢	Entities: policies, candidates, pledges, endorsements.
	‚Ä¢	Union-scoped tallies with verifiable counts and audit trail.
	‚Ä¢	Progress Tracking
	‚Ä¢	Milestones, action items, completion %, assignees, timestamps.
	‚Ä¢	In-App Docs
	‚Ä¢	Rich-text (portable JSON such as Markdown or TipTap JSON). Persist versions; allow export to .md and share via deep link.

5) Data & Schema Guardrails
	‚Ä¢	All tables use UUID v4 PKs; timestamps in UTC with DB defaults.
	‚Ä¢	Soft-delete with deleted_at column; no hard deletes in app.
	‚Ä¢	Add composite indexes for read paths (e.g., posts(union_id, created_at desc)).
	‚Ä¢	Paginate with cursor-based pagination (created_at + id).
	‚Ä¢	Validation at three layers: client schema (Zod), server policies (RLS), and database constraints.

6) Offline-First & Performance
	‚Ä¢	Query caching with React Query; stale-while-revalidate.
	‚Ä¢	Persist cache to disk with encryption for sensitive user scope.
	‚Ä¢	Optimistic updates for votes/likes/reactions; rollback on failure.
	‚Ä¢	Avoid large over-fetch: use select column whitelists and range.
	‚Ä¢	Images: use expo-image with content-size hints; prefetch on Wi-Fi.

7) Error Handling & Observability
	‚Ä¢	Centralized error boundary and toast system.
	‚Ä¢	Network & Supabase errors mapped to user-friendly messages.
	‚Ä¢	Logging: sentry-expo integration in production builds; console logging only in dev.
	‚Ä¢	Add a diagnostics screen (env, device info, build profile, Supabase region, token age).

8) Security & Abuse Prevention
	‚Ä¢	Use expo-secure-store for tokens; never log secrets.
	‚Ä¢	CS/abuse: server-side rate limits; client-side cooldowns; profanity filter (client-side optional, server required).
	‚Ä¢	Image uploads scanned server-side (bucket policy + size/type limits).
	‚Ä¢	Feature flags for sensitive/beta features.

9) UX, A11y, and Internationalization
	‚Ä¢	A11y labels on all interactive elements; support dynamic font sizing.
	‚Ä¢	RTL-ready layout; start strings with EN and plan for ES (i18n JSON).
	‚Ä¢	Respect Appearance (light/dark) and Haptics where appropriate.

10) Notifications & Links
	‚Ä¢	Use expo-notifications. Set up FCM (Android) & APNs (iOS) for EAS builds.
	‚Ä¢	Channel categories by domain (debates, votes, milestones).
	‚Ä¢	Deep link targets should restore navigation state to the correct screen with params.

11) Build & Release (EAS)
	‚Ä¢	Profiles: development, preview, production.
	‚Ä¢	iOS: set bundle identifier; Android: set applicationId. Keep them stable.
	‚Ä¢	Automate with EAS Build + EAS Submit; store credentials in EAS.
	‚Ä¢	OTA updates via EAS Update for JS only; bump runtime when native changes occur.
	‚Ä¢	Keep app size lean: remove unused fonts/assets; enable asset compression.

12) CI Quality Gates
	‚Ä¢	Required checks on every PR:
	‚Ä¢	expo-doctor passes with no blocking issues.
	‚Ä¢	TypeScript with noImplicitAny, strictNullChecks.
	‚Ä¢	ESLint + Prettier clean; unit tests for utilities and data mappers.
	‚Ä¢	Basic instrumentation test: launch app, navigate main tabs, run one Supabase query in a mock env.

13) Developer Experience
	‚Ä¢	Provide Seed scripts to create a demo union, channels, sample posts, and fake candidates/policies.
	‚Ä¢	Storybook (Expo-compatible) for atomic UI components.
	‚Ä¢	.vscode workspace settings for path aliases, format on save.

14) Acceptance Criteria (Must Pass Before Release)
	1.	Cold start < 2.5s on mid-range Android; tab switch < 200ms.
	2.	Works in Expo Go on iOS & Android with full core flow:
	‚Ä¢	Sign in ‚Üí join union ‚Üí read/write posts ‚Üí join debate ‚Üí pledge vote ‚Üí see progress.
	3.	Fresh install handles offline first launch (graceful limited mode).
	4.	Deep link from push ‚Üí opens to the exact debate/post/vote screen.
	5.	Logout clears all sensitive data and cached queries.

15) Deliverables Each Sprint
	‚Ä¢	Updated ERD & RLS policy list.
	‚Ä¢	End-to-end demo script + screen recording from Expo Go.
	‚Ä¢	Changelog with any dependency that would break Expo Go if merged.

‚∏ª

Agent Instructions (literal)
	‚Ä¢	Adhere strictly to these constraints.
	‚Ä¢	If a requested dependency is not Expo-Go compatible, propose an Expo alternative or gate it behind expo-dev-client and feature flags for later.
	‚Ä¢	Before adding any library, explain:
	1.	Why it‚Äôs needed, 2) Expo Go compatibility, 3) Impact on EAS build, 4) Removal plan if deprecated.

‚∏ª

If you want, I can also generate:
	‚Ä¢	a first-pass Supabase schema (SQL) with RLS policies,
	‚Ä¢	a typed API layer (supabaseClient.ts, query hooks),
	‚Ä¢	and a ready-to-run Expo starter with nav scaffolding and the diagnostics screen.